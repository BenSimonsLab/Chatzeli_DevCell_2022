% ----------------------------------------------------------------------- %
% Cell fate specification in the developing mouse salivary gland is 
% mediated through a cellular hierarchy controlled by Notch and Kras 
% signaling
%
% Chatzeli et al.
% Developmental Cell (2022)
% ----------------------------------------------------------------------- %
%
% This script loads "edge list" and "node position" together with "clone
% position" files to reconstruct the ductal network and clone distribution 
% in the salivary gland.
%
% Inputs:
% edge_list: Array of size number_of_links*4, containing the source node id 
% (column 1), target node id (column 2), and distance from source to target 
% (column 3), and width of the corresponding duct (column 5).
%
% node_positions: Array of size number_of_nodes*4. Column 1: node id. 
% Columns 2-4: coordinates (x,y,z) for each node, respectively.
%
% clone_positions: Array where every row shows the information for a single
% cell. Column 1: number of the clone to which the cell corresponds.  
% Columns 2: type of cell coordinates (x,y,z) for each node, respectively.
% 
% Cell type info:
% clone info: Clone number | index	| x(um)	| y(um)	| z(um)	| cell type | node 
%
% cell types (for cases where n_cell_types == 3):
% acinar distal     1
% acinar proximal	2
% ductal            3
% cell types (for cases where n_cell_types == 8)
% acinar high Mist1	1
% acinar low Mist1	2
% ductal intercallated	3
% ductal intralobular luminal	4
% ductal intralobular basal	5
% ductal interlobular luminal	6
% ductal inerloboular basal	7
% myoepithelial	8
% ----------------------------------------------------------------------- %
clc; clear all; close all;

% provide path to "data" directory
data_dir = '/Users/ibordeu/Documents/Cambridge/Salivary gland/Chatzeli_DevCell_2022/ductal network and clonal data/data';
remove_ductal_clones = 1; % set to 1 to remove clones with only ductal cells
% select dataset to plot
% Options:
% 'E18.5 control'
% 'E18.5 kras'
dataset = 'E18.5 kras'

% source_node of the networks
source_node = 1; 
main_folder_path = {}; file_name_bare = {}; leg = {}; n_cell_types = []; dr = [];
if ispc; slsh = '\'; else; slsh = '/'; end
switch dataset
    case 'E18.5 control'
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'control',slsh,'E14.5_E18.5',slsh,'LCA103_1c']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 confetti 1'; 
        dr(end+1,:) = [0.5682, 0.5682, 1]; % um/pixel
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'control',slsh,'E14.5_E18.5',slsh,'LCA103.1c 2020.03.02']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 confetti 2'; 
        dr(end+1,:) = [0.5678, 0.5678, 2]; % um/pixel
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'control',slsh,'E14.5_E18.5',slsh,'LCA152.1j 2020.10.09']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 confetti 3';
        dr(end+1,:) = [0.5678, 0.5678, 3]; % um/pixel

    case 'E18.5 kras'
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'r2Kras',slsh,'LCA98.1h 2020.03.12']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 kras 1'; 
        dr(end+1,:) = [0.5678,0.5678,1.4992]; % um/pixel
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'r2Kras',slsh,'LCA98.1h 2020.03.15']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 kras 2'; 
        dr(end+1,:) = [0.5678,0.5678,2.0014]; % um/pixel
        main_folder_path{end+1} = [data_dir,slsh,'E18_5',slsh,'r2Kras',slsh,'LCA98.1h 2020.03.17']; n_cell_types(end+1) = 8;
        leg{end+1} = 'E18.5 kras 3'; 
        dr(end+1,:) = [0.5678,0.5678,2.0014]; % um/pixel
end

%%
n_files = length(main_folder_path);
edge_list{n_files} = []; node_positions{n_files} = []; clone_positions = {};
% load data
for n_file = 1:n_files
    [edge_list_fname,node_positions_fname] = get_file_paths(main_folder_path{n_file});
    edge_list{n_file} = load([main_folder_path{n_file},slsh,edge_list_fname{1}]);
    node_positions{n_file} = load([main_folder_path{n_file},slsh,node_positions_fname{1}]);
    % clone positions columns:
    in_dir = dir(main_folder_path{n_file});fnmes = {in_dir.name};
    clone = find(contains(fnmes,'clone'));
    if ~isempty(clone)
        [clone_pos] = get_clone_file(main_folder_path{n_file});
        for nclone = 1:length(clone_pos)
            if ~isempty(clone_pos{nclone})
                clone_positions{n_file,nclone} = load([main_folder_path{n_file},slsh,clone_pos{nclone}]);
            else
                clone_positions{n_file,nclone} = [];
            end

        end
    end
end
%
% REMOVE CLONES THAT CONTAIN ONLY DUCTAL CELLS AND ANY CLONE THAT SPANS A SINGLE DUCT
% clones will be removed if they only contain ductal cells OR if cells live
% in <= than min_number_ducts ducts.
min_number_ducts = 1;

if remove_ductal_clones == 1
    for n_file = 1:n_files
        for nclone = 1:length(clone_pos)
            if numel(clone_positions{n_file,nclone}) > 0
                [paths,dists,degrees] = node_level(edge_list{n_file},node_positions{n_file},source_node);
                [clone_positions_temp,tot_num_clones,num_del_clones] = remove_ductal_only_clones(clone_positions{n_file,nclone}, min_number_ducts,n_cell_types(n_file),dists);
                cn = clone_positions_temp(:,1); cp = clone_positions_temp(:,7); ct = clone_positions_temp(:,6);
                cpos = clone_positions_temp(:,3:5);
                %             cn(cp>max(node_positions_large{n_file}(:,1))) = []; cp(cp>max(node_positions_large{n_file}(:,1))) = [];
                clone_nodes_clean{n_file,nclone} = [cp, cn, ct, cpos];
            else
                clone_nodes_clean{n_file,nclone} = [];
            end
        end
    end
end

%% PLOT BRANCHING TREE FOR EACH SAMPLE

for n_file = 1:n_files
    [~,dists,D] = node_level(edge_list{n_file},node_positions{n_file},source_node);
 
    figure;
    h = plot_graph(edge_list{n_file},node_positions{n_file},source_node,0);
    title({leg{n_file},['#ducts: ',num2str(size(edge_list{n_file},1))]})
    axis tight
    add_generations_to_tree(max(dists));
    set(gcf,'color','w');
end

%% PLOT BRANCHING TREE WITH CLONES
for n_file = 1:n_files
    [~,dists,D] = node_level(edge_list{n_file},node_positions{n_file},source_node);

    cn = []; cp = [];
    for i = 1:size(clone_nodes_clean,2)
        all_clones = clone_nodes_clean{n_file,i};
        if ~isempty(all_clones)
            mx = max(cn); if isempty(mx); mx = 0; end
            cn = [cn;all_clones(:,2)+mx]; cp = [cp;all_clones(:,1)];
        end
    end

    c = parula(length(unique(cn)));

    figure;
    % plot brnaching tree
    plot_graph_with_clones(edge_list{n_file},node_positions{n_file},source_node,0,[cp, cn],[],dr(n_file,:),c);
    % add level lines
    add_generations_to_tree(max(dists));
    title({leg{n_file},['#ducts: ',num2str(size(edge_list{n_file},1))]})
end

%% PLOT 3D NETWORK WITH CLONES

for n_file = 1:n_files   
    figure;
    % plot 3d network
    plot_3d_network(edge_list{n_file},node_positions{n_file},dr(n_file,:))
    hold on
    % add clones

    cn = []; cp = []; cpos = [];
    for i = 1:size(clone_nodes_clean,2)
        all_clones = clone_nodes_clean{n_file,i};
        if ~isempty(all_clones)
            mx = max(cn); if isempty(mx); mx = 0; end
            cn = [cn;all_clones(:,2)+mx]; cp = [cp;all_clones(:,1)]; cpos = [cpos;all_clones(:,4:6)];
        end
    end


    clone_nums = unique(cn);
    for i = 1:numel(clone_nums)
        in = find(cn == clone_nums(i));
        c(i,:) = rand(1,3);
        scatter3(cpos(in,1),cpos(in,2),cpos(in,3),20,'filled','MarkerFaceColor',c(i,:),'MarkerEdgeColor','k')
    end
    hold off
    axis equal
    box on
    xlabel('\mum');ylabel('\mum');ylabel('\mum')
    title(leg{n_file})
end

%% FUNCTIONS %%

function h = plot_graph(edge_list,node_positions,source_node,use_weights,weights)
m = max(node_positions(:,1));
edge_list(any(isnan(edge_list), 2), :) = m + 1;
% node_positions(any(isnan(node_positions), 2), :) = [];
if use_weights == 0
    G = graph(edge_list(:,1),edge_list(:,2));
    h = plot(G,'layout','layered','NodeLabel',{},'Marker','none','EdgeColor','k');
    layout(h,'layered','sources',source_node);
else
    G = graph(edge_list(:,1),edge_list(:,2),weights);
    weights = G.Edges.Weight;
    weights(~isfinite(weights)) = 0.1;
    weights(weights == 0) = 0.1;
    weights = log(weights); weights(weights < 0) = 10^-10;
    h = plot(G,'.','layout','layered','LineWidth',weights,'NodeLabel',{});
    layout(h,'layered','sources',source_node);
end
end % end plot_graph

function [paths,dists,D,G] = node_level(edge_list,node_positions,source_node) 
% calculate the level of each node and if such node is a branching or end point
% output:
% paths : paths of nodes from the shourse to every other node
% dists : distance (in node jumps) from the shourse to every other node
% D : degrees of each node
% G : graph object
G = graph(edge_list(:,1),edge_list(:,2));
paths = {};
dists = [];
for i = 1:size(node_positions,1)
    nod = node_positions(i,1);
    if nod~=i
        disp('Warning: incompatible node_positions file')
        break;
    end
    if isfinite(nod)
    [P,d] = shortestpath(G,source_node,nod);
    paths{i} = P;
    dists(i) = d;
    else
        paths{i} = nan;
        dists(i) = nan;
    end
end
D = degree(G);
end  % end node_level

function c = plot_graph_with_clones(edge_list,node_positions,source_node,d3,clone_nodes,clone_positions,dr,c)
m = max(node_positions(:,1));
edge_list(any(isnan(edge_list), 2), :) = m + 1;
if d3 == 1
    G = graph(edge_list(:,1),edge_list(:,2),edge_list(:,3),'OmitSelfLoops');
    
    x = node_positions(:,2).*dr(1);
    y = node_positions(:,3).*dr(2);
    z = node_positions(:,4).*dr(3);
    
    h = plot(G,'XData',x,'YData',y,'ZData',z);
    hold on
    clone_nums = unique(clone_positions(:,1));
    for i = 1:numel(clone_nums)
        in = find(clone_positions(:,1) == clone_nums(i));
        c(i,:) = rand(1,3);
        scatter3(clone_positions(in,3),clone_positions(in,4),clone_positions(in,5),50,'filled','MarkerFaceColor',c(i,:),'MarkerEdgeColor','k')
    end
    hold off
else
    G = graph(edge_list(:,1),edge_list(:,2),edge_list(:,3),'OmitSelfLoops');
    h = plot(G,'layout','layered','NodeLabel',{},'Marker','none','EdgeColor','k');
    layout(h,'layered','sources',source_node);
    un = unique(clone_nodes(:,2));
    hold on
    for i = 1:numel(un)
        ind = find(clone_nodes(:,2) == un(i));
        highlight(h,clone_nodes(ind,1),'Marker','o','NodeColor',c(i,:),'MarkerSize',3);
    end
    hold off
    axis tight
end

end % end plot_graph_with_clones

function add_generations_to_tree(max_level)
grid on
yticks(1:(max_level+1))
yTickLabels = arrayfun(@num2str,max_level:-1:0,'uni',false);
yticklabels(yTickLabels)

box off
ax1 = gca;  
ax1.XAxis.Visible = 'off';
% bg = get(gcf, 'Color');
% axes('xcolor', bg);
ylabel('Tree level (i)')
end % end add_generations_to_tree

function [clone_positions,tot_num_clones,num_del_clones] = remove_ductal_only_clones(clone_positions,min_number_ducts,n_cell_types,dists)
% removes clones that are compodes exclusively of ductal cells
clone_index = clone_positions(:,1);
cell_type   = clone_positions(:,6);
clone_nodes = clone_positions(:,7);

indc_to_delete = [];
% run through all clones
un = unique(clone_index);
tot_num_clones = numel(un);
num_del_clones = 0;
for i = 1:numel(un)
    % find all cell i clone
    indc = find(clone_index == un(i));
    % extact cell types
    cell_type_in_clone = cell_type(indc);
    % find nodes/ducts of cell in clone
    nodes_in_clone = clone_nodes(indc); un_ducts = length(unique(nodes_in_clone));
    min_level = min(dists(nodes_in_clone));
    if n_cell_types == 3
        % acinar distal     1
        % acinar proximal	2
        % ductal            3
        if un_ducts <= min_number_ducts || min_level <= 1
            % store indices to delete
           indc_to_delete = [indc_to_delete; indc];
           num_del_clones = num_del_clones+1;
        end
    elseif n_cell_types == 8
        % acinar high Mist1	1
        % acinar low Mist1	2
        % ductal intercallated	3
        % ductal intralobular luminal	4
        % ductal intralobular basal	5
        % ductal interlobular luminal	6
        % ductal inerloboular basal	7
        % myoepithelial	8
        if un_ducts <= min_number_ducts || min_level <= 2
           indc_to_delete = [indc_to_delete; indc];
           num_del_clones = num_del_clones+1;
        end
    else
        disp(['Inconsistent number of cell types:',num2str(n_cell_types)]);
        break;
    end
    
end
% remove cells 
clone_positions(indc_to_delete,:) = [];
end % end remove_ductal_only_clones

function plot_3d_network(edge_list,node_positions,dr)
hold on
for i=1:length(edge_list(:,1))
    n1 = edge_list(i,1);
    n2 = edge_list(i,2);
    r1 = node_positions(n1,2:4).*dr;
    r2 = node_positions(n2,2:4).*dr;
%     plot([r1(1) r2(1)],[r1(2) r2(2)],'-k','linewidth',1.5)
    plot3([r1(1) r2(1)],[r1(2) r2(2)],[r1(3) r2(3)],'-k')
end
hold off
end % end plot_3d_network

function [edge_list,node_positions] = get_file_paths(filepath)
in_dir = dir(filepath);
in_dir = in_dir(~startsWith({in_dir.name}, '.'));
%filter out any folders in path
in_dir = in_dir(find(~cellfun(@isdir,{in_dir(:).name})));
%find latest file
fnames = {in_dir.name};
edge = find(contains(fnames,'edge'));
node = find(contains(fnames,'node'));

node_positions = fnames(node);
edge_list = fnames(edge);
end %end get_file_paths

function [clone_pos] = get_clone_file(path)
in_dir = dir(path);
in_dir = in_dir(~startsWith({in_dir.name}, '.'));
%filter out any folders in path
in_dir = in_dir(find(~cellfun(@isdir,{in_dir(:).name})));
%find latest file
fnmes = {in_dir.name};
clone = find(contains(fnmes,'clone'));

clone_pos = {};
if numel(clone)==1
    clone_pos{1} = fnmes(clone).name;
else
    cfp = find(contains(fnmes,'CFP'));
    gfp = find(contains(fnmes,'GFP'));
    yfp = find(contains(fnmes,'YFP'));
    rfp = find(contains(fnmes,'RFP'));

    if ~isempty(cfp); clone_pos{1} = fnmes{cfp}; end
    if ~isempty(gfp); clone_pos{2} = fnmes{gfp}; end
    if ~isempty(yfp); clone_pos{3} = fnmes{yfp}; end
    if ~isempty(rfp); clone_pos{4} = fnmes{rfp}; else; clone_pos{4} = []; end
end %end get_file_paths
end